plugins {
//Android项目开发插件
    id 'com.android.application'
//kotlin Android开发插件
    id 'kotlin-android'
//kotlin注解处理插件，kapt是kotlin的注解处理器，kapt 也能够处理 Java 文件，所以需要替换 annotationProcessor 关键字
    id 'kotlin-kapt'
//应用Hilt插件 ,Hilt是 Android 的依赖项注入库，可减少在项目中执行手动依赖项注入的样板代码。
    id 'dagger.hilt.android.plugin'
//导航的插件,safeargs用于在fragment之间跳转传输少量数据,去掉后面的.kotlin就是适用于 Java 模块或 Java 和 Kotlin 混合模块的 Java 语言代码
    id 'androidx.navigation.safeargs.kotlin'
}

//控制台有乱码
//Android Studio\bin下的
//studio.exe.vmoptions和
//studio64.exe.vmoptions文件的内容最后加入
//-Dfile.encoding=UTF-8

android {
    compileSdkVersion 31
    buildToolsVersion '30.0.3'
    defaultConfig {
        applicationId "com.sq26.experience"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                //把Room在编译时将数据库的架构信息导出到JSON文件中。
                // 在room.schemaLocation中设置导出路径
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    //视图绑定功能启用
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    buildTypes {
        release {
            // 是否进行混淆
            minifyEnabled true
            // 混淆文件的位置，其中'proguard-android.txt'为sdk默认的混淆配置，
            //'proguard-rules.pro' 是该模块下的混淆配置
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //注解框架需要的支持
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
//        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    //Android ktx,KTX 扩展程序可以为 Jetpack、Android 平台及其他 API 提供简洁的惯用 Kotlin 代码。
    implementation 'androidx.core:core-ktx:1.8.0-alpha03'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    //Google团队开发的Material风格的新组件支持库
    implementation 'com.google.android.material:material:1.5.0'
    //constraintLayout布局控件
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    //RecyclerView控件
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    //CardView控件,纸片布局
    implementation 'androidx.cardview:cardview:1.0.0'
    //Butter Knife,黄油刀,view注解框架
    implementation 'com.jakewharton:butterknife:10.2.3'
    kapt 'com.jakewharton:butterknife-compiler:10.2.3'
    //fastJson json解析库
    implementation 'com.alibaba:fastjson:1.2.76'
    //zxing框架核心
    implementation 'com.google.zxing:core:3.4.1'
    //Fresco框架
    implementation 'com.facebook.fresco:fresco:2.6.0'
    //获取图片的属性标签
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    //okHttp轻量级网络框架
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
    //android文件管理类
    implementation 'androidx.documentfile:documentfile:1.0.1'
    //AndroidPdfViewer 查看pdf的控件
    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'
    //Android的原始Socket，HTTP（s）客户端/服务器和WebSocket库
    implementation 'com.koushikdutta.async:androidasync:3.1.0'
    //生命周期感知型组件
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.lifecycleVersion"
    //LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
    // Room 组件(数据库框架)
    //Android官网依赖是这样的，java开发人员使用
//    implementation "android.arch.persistence.room:runtime:$room_version"
//    annotationProcessor 'android.arch.persistence.room:compiler:$room_version'
    //对于那些使用Kotlin的人，请尝试在应用中更改annotationProcessor为kapt
//    implementation "android.arch.persistence.room:runtime:$room_version"
//    kapt "android.arch.persistence.room:compiler:$room_version"
//如果您已迁移到androidx
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    //Kotlin扩展程序和协同程序对Room的支持
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    // Paging 3 组件(数据分页)
    implementation "androidx.paging:paging-runtime-ktx:3.1.0"
    //navigation组件(fragment管理)
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"
    //activity的kotlin强化库
    implementation "androidx.activity:activity-ktx:1.4.0"
    //Fragment KTX 提供了一系列扩展程序以简化 Fragment API。
    implementation "androidx.fragment:fragment-ktx:1.4.1"
    //Android 上的 Kotlin 协程
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    //Collection 扩展程序包含在 Android 的节省内存的集合库中使用的实用函数，包括 ArrayMap、LongParseArray、LruCache 等等。
    implementation "androidx.collection:collection-ktx:1.2.0"
    //ViewModel KTX 库提供了一个 viewModelScope() 函数，可让您更轻松地从 ViewModel 启动协程。
    // CoroutineScope 绑定至 Dispatchers.Main，并且会在清除 ViewModel 后自动取消。
    //使用 Hilt 实现依赖项注入
    implementation "com.google.dagger:hilt-android:$rootProject.hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$rootProject.hiltVersion"
    //添加 WorkManager 的依赖项Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:2.7.1"
    //CameraX核心库
    implementation "androidx.camera:camera-core:$rootProject.cameraxVersion"
    implementation "androidx.camera:camera-camera2:$rootProject.cameraxVersion"
    // CameraX生命周期库
    implementation "androidx.camera:camera-lifecycle:$rootProject.cameraxVersion"
    // CameraX View类
    implementation "androidx.camera:camera-view:1.1.0-beta01"
    // CameraX扩展库
    implementation "androidx.camera:camera-extensions:1.1.0-beta01"
    //便捷数据储存,使用键存储和访问数据。此实现不需要预定义的架构，也不确保类型安全。
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    //moshi是kotlin专为kotlin设计的json序列化和反序列化框架
//    implementation 'com.squareup.moshi:moshi:1.12.0'
//    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.12.0'

}
